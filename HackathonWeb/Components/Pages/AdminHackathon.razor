@page "/admin/hackathon/{HackathonId:int}"
@using System.Net.Http.Json
@using HackathonApi.Models
@inject HttpClient Http
@inject NavigationManager Nav
@rendermode InteractiveServer
<h2>Редактирование хакатона</h2>
@if (hackathon == null)
{
    <p>Загрузка...</p>
}
else
{
    <div class="card mb-3" style="max-width:600px;">
        <div class="card-body">
            <input type="text" class="form-control mb-2" @bind="hackathon.Name" placeholder="Название" />
            <input type="text" class="form-control mb-2" @bind="hackathon.Description" placeholder="Описание" />
            <input type="datetime-local" class="form-control mb-2" @bind-value="@startDate" />
            <input type="datetime-local" class="form-control mb-2" @bind-value="@endDate" />
            <button class="btn btn-success me-2" @onclick="SaveHackathon">Сохранить</button>
            <button class="btn btn-outline-secondary" @onclick="Back">Назад</button>
        </div>
    </div>
}
<p class="text-info">@resultMsg</p>

<h4>Задания хакатона</h4>
@if (tasks == null)
{
    <p>Загрузка...</p>
}
else
{
    <ul class="list-group mb-3" style="max-width:600px;">
        @foreach (var task in tasks)
        {
            <li class="list-group-item">
                <input type="text" class="form-control mb-1" @bind="task.Description" />
                <button class="btn btn-sm btn-success me-2" @onclick="() => SaveTask(task)">Сохранить</button>
            </li>
        }
    </ul>
    <div class="form-group mb-2" style="max-width:600px;">
        <input type="text" class="form-control mb-2" @bind="newTaskDescription" placeholder="Новое задание" />
        <button class="btn btn-primary" @onclick="AddTask">Добавить задание</button>
    </div>
}

<h4>Запросы команд на участие</h4>
@if (hackathonRequests == null)
{
    <p>Загрузка запросов...</p>
}
else if (hackathonRequests.Count == 0)
{
    <p>Нет запросов на участие.</p>
}
else
{
    <ul class="list-group mb-3" style="max-width:600px;">
        @foreach (var request in hackathonRequests)
        {
            <li class="list-group-item d-flex justify-content-between align-items-center">
                <div>
                    <strong>@request.TeamName</strong><br />
                    <small class="text-muted">@request.TeamDescription</small>
                </div>
                <button class="btn btn-success btn-sm" @onclick="() => AcceptTeamRequest(request.Id)">Принять</button>
            </li>
        }
    </ul>
}
<p class="text-info">@requestResult</p>

<h4>Команды, участвующие в хакатоне</h4>
@if (participatingTeams == null)
{
    <p>Загрузка команд...</p>
}
else if (participatingTeams.Count == 0)
{
    <p>Нет участвующих команд.</p>
}
else
{
    <ul class="list-group mb-3" style="max-width:600px;">
        @foreach (var team in participatingTeams)
        {
            <li class="list-group-item d-flex justify-content-between align-items-center">
                <div>
                    <strong>@team.Name</strong><br />
                    <small class="text-muted">@team.Description</small>
                </div>
                <button class="btn btn-danger btn-sm" @onclick="() => RemoveTeamFromHackathon(team.Id)">Исключить</button>
            </li>
        }
    </ul>
}
<p class="text-info">@teamResult</p>

@code {
    [Parameter]
    public int HackathonId { get; set; }
    private Hackathon hackathon;
    private List<HTask> tasks;
    private string resultMsg;
    private DateTime? startDate;
    private DateTime? endDate;
    private string newTaskDescription;
    private List<HackathonRequestDTO> hackathonRequests;
    private string requestResult;
    private List<TeamDTO> participatingTeams;
    private string teamResult;

    protected override async Task OnInitializedAsync()
    {
        await LoadHackathon();
        await LoadTasks();
        await LoadHackathonRequests();
        await LoadParticipatingTeams();
    }

    private async Task LoadHackathon()
    {
        try
        {
            hackathon = await Http.GetFromJsonAsync<Hackathon>($"/api/hackathon/{HackathonId}");
            startDate = hackathon.Start;
            endDate = hackathon.End;
        }
        catch { hackathon = null; }
    }

    private async Task SaveHackathon()
    {
        if (string.IsNullOrWhiteSpace(hackathon.Name) || string.IsNullOrWhiteSpace(hackathon.Description) || startDate == null || endDate == null)
        {
            resultMsg = "Заполните все поля.";
            return;
        }
        hackathon.Start = startDate.Value;
        hackathon.End = endDate.Value;
        var response = await Http.PatchAsJsonAsync("/api/hackathon", hackathon);
        if (response.IsSuccessStatusCode)
        {
            resultMsg = "Изменения сохранены!";
        }
        else
        {
            resultMsg = $"Ошибка: {response.StatusCode}";
        }
    }

    private async Task LoadTasks()
    {
        try
        {
            tasks = await Http.GetFromJsonAsync<List<HTask>>($"/api/hackathon/{HackathonId}/tasks");
        }
        catch { tasks = new List<HTask>(); }
    }

    private async Task SaveTask(HTask task)
    {
        var response = await Http.PatchAsJsonAsync("/api/task", task);
        if (response.IsSuccessStatusCode)
        {
            resultMsg = "Задание сохранено!";
        }
        else
        {
            resultMsg = $"Ошибка при сохранении задания: {response.StatusCode}";
        }
    }

    private async Task AddTask()
    {
        if (string.IsNullOrWhiteSpace(newTaskDescription))
        {
            resultMsg = "Введите текст задания.";
            return;
        }
        var response = await Http.PostAsJsonAsync($"/api/task?hackathonId={HackathonId}",  newTaskDescription);
        if (response.IsSuccessStatusCode)
        {
            resultMsg = "Задание добавлено!";
            newTaskDescription = string.Empty;
            await LoadTasks();
        }
        else
        {
            resultMsg = $"Ошибка при добавлении задания: {response.StatusCode}";
        }
    }

    private void Back()
    {
        Nav.NavigateTo("/admin");
    }

    private async Task LoadHackathonRequests()
    {
        try
        {
            hackathonRequests = await Http.GetFromJsonAsync<List<HackathonRequestDTO>>($"/api/hackathon/{HackathonId}/requests");
        }
        catch { hackathonRequests = new List<HackathonRequestDTO>(); }
    }

    private async Task AcceptTeamRequest(int requestId)
    {
        requestResult = string.Empty;
        var response = await Http.PostAsync($"/api/hackathon/request/accept?requestId={requestId}", null);
        if (response.IsSuccessStatusCode)
        {
            requestResult = "Команда принята в хакатон!";
            await LoadHackathonRequests();
            await LoadParticipatingTeams();
        }
        else
        {
            requestResult = $"Ошибка: {response.StatusCode}";
        }
    }

    private async Task LoadParticipatingTeams()
    {
        try
        {
            participatingTeams = await Http.GetFromJsonAsync<List<TeamDTO>>($"/api/hackathon/{HackathonId}/participating-teams");
        }
        catch { participatingTeams = new List<TeamDTO>(); }
    }

    private async Task RemoveTeamFromHackathon(int teamId)
    {
        teamResult = string.Empty;
        var response = await Http.DeleteAsync($"/api/hackathon/{HackathonId}/team/{teamId}");
        if (response.IsSuccessStatusCode)
        {
            teamResult = "Команда исключена из хакатона!";
            await LoadParticipatingTeams();
        }
        else
        {
            teamResult = $"Ошибка: {response.StatusCode}";
        }
    }

    public class HackathonRequestDTO
    {
        public int Id { get; set; }
        public string TeamName { get; set; }
        public string TeamDescription { get; set; }
    }

    public class TeamDTO
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
    }
} 