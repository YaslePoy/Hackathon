@page "/admin/hackathon/{HackathonId:int}"
@using System.Net.Http.Json
@using HackathonApi.Models
@inject HttpClient Http
@inject NavigationManager Nav

<h2>Редактирование хакатона</h2>
@if (hackathon == null)
{
    <p>Загрузка...</p>
}
else
{
    <div class="card mb-3" style="max-width:600px;">
        <div class="card-body">
            <input type="text" class="form-control mb-2" @bind="hackathon.Name" placeholder="Название" />
            <input type="text" class="form-control mb-2" @bind="hackathon.Description" placeholder="Описание" />
            <input type="date" class="form-control mb-2" @bind-value="@startDate" />
            <input type="date" class="form-control mb-2" @bind-value="@endDate" />
            <button class="btn btn-success me-2" @onclick="SaveHackathon">Сохранить</button>
            <button class="btn btn-outline-secondary" @onclick="Back">Назад</button>
        </div>
    </div>
}
<p class="text-info">@resultMsg</p>

<h4>Задания хакатона</h4>
@if (tasks == null)
{
    <p>Загрузка...</p>
}
else
{
    <ul class="list-group mb-3" style="max-width:600px;">
        @foreach (var task in tasks)
        {
            <li class="list-group-item">
                <input type="text" class="form-control mb-1" @bind="task.Description" />
                <button class="btn btn-sm btn-success me-2" @onclick="() => SaveTask(task)">Сохранить</button>
            </li>
        }
    </ul>
    <div class="form-group mb-2" style="max-width:600px;">
        <input type="text" class="form-control mb-2" @bind="newTaskDescription" placeholder="Новое задание" />
        <button class="btn btn-primary" @onclick="AddTask">Добавить задание</button>
    </div>
}

@code {
    [Parameter]
    public int HackathonId { get; set; }
    private Hackathon hackathon;
    private List<HTask> tasks;
    private string resultMsg;
    private DateTime? startDate;
    private DateTime? endDate;
    private string newTaskDescription;

    protected override async Task OnInitializedAsync()
    {
        await LoadHackathon();
        await LoadTasks();
    }

    private async Task LoadHackathon()
    {
        try
        {
            hackathon = await Http.GetFromJsonAsync<Hackathon>($"/api/hackathon/{HackathonId}");
            startDate = hackathon.Start;
            endDate = hackathon.End;
        }
        catch { hackathon = null; }
    }

    private async Task SaveHackathon()
    {
        if (string.IsNullOrWhiteSpace(hackathon.Name) || string.IsNullOrWhiteSpace(hackathon.Description) || startDate == null || endDate == null)
        {
            resultMsg = "Заполните все поля.";
            return;
        }
        hackathon.Start = startDate.Value;
        hackathon.End = endDate.Value;
        var response = await Http.PatchAsJsonAsync("/api/hackathon", hackathon);
        if (response.IsSuccessStatusCode)
        {
            resultMsg = "Изменения сохранены!";
        }
        else
        {
            resultMsg = $"Ошибка: {response.StatusCode}";
        }
    }

    private async Task LoadTasks()
    {
        try
        {
            tasks = await Http.GetFromJsonAsync<List<HTask>>($"/api/task?hackathonId={HackathonId}");
        }
        catch { tasks = new List<HTask>(); }
    }

    private async Task SaveTask(HTask task)
    {
        var response = await Http.PatchAsJsonAsync("/api/task", task);
        if (response.IsSuccessStatusCode)
        {
            resultMsg = "Задание сохранено!";
        }
        else
        {
            resultMsg = $"Ошибка при сохранении задания: {response.StatusCode}";
        }
    }

    private async Task AddTask()
    {
        if (string.IsNullOrWhiteSpace(newTaskDescription))
        {
            resultMsg = "Введите текст задания.";
            return;
        }
        var newTask = new HTask { Description = newTaskDescription, HackathonId = HackathonId };
        var response = await Http.PostAsJsonAsync("/api/task", newTask);
        if (response.IsSuccessStatusCode)
        {
            resultMsg = "Задание добавлено!";
            newTaskDescription = string.Empty;
            await LoadTasks();
        }
        else
        {
            resultMsg = $"Ошибка при добавлении задания: {response.StatusCode}";
        }
    }

    private void Back()
    {
        Nav.NavigateTo("/admin");
    }
} 