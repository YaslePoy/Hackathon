@page "/jury/evaluation/{HackathonId:int}"
@using System.Net.Http.Json
@using Fluxor
@using HackathonApi.Models
@inject HttpClient Http
@inject NavigationManager Nav
@rendermode InteractiveServer
<h2>Оценка хакатона</h2>
@if (hackathon == null)
{
    <p>Загрузка...</p>
}
else
{
    <h4>@hackathon.Name</h4>
    <p>@hackathon.Description</p>
}

<h3>Решения по задачам</h3>
@if (tasks == null)
{
    <p>Загрузка задач...</p>
}
else if (tasks.Count == 0)
{
    <p>Нет задач для оценки.</p>
}
else
{
    @foreach (var task in tasks)
    {
        <div class="card mb-3" style="max-width:800px;">
            <div class="card-header">
                <h5>Задача: @task.Description</h5>
            </div>
            <div class="card-body">
                @if (solutionsByTask.ContainsKey(task.Id) && solutionsByTask[task.Id].Any())
                {
                    @foreach (var solution in solutionsByTask[task.Id])
                    {
                        <div class="border rounded p-3 mb-2">
                            <h6>Команда: @solution.TeamName</h6>
                            <p><strong>Ответ:</strong></p>
                            <div class="bg-light p-2 rounded">@solution.Text</div>
                            
                            <div class="mt-3">
                                <h6>Ваш комментарий:</h6>
                                <textarea class="form-control mb-2" @bind="solution.Comment" placeholder="Ваш комментарий..."></textarea>
                                <div class="d-flex align-items-center">
                                    <label class="me-2">Оценка:</label>
                                    <input type="number" class="form-control d-inline-block me-2" style="width:100px;" 
                                           @bind="solution.Score" placeholder="0-10" min="0" max="10" />
                                    <button class="btn btn-success btn-sm" @onclick="() => SaveComment(solution.Id)">Сохранить комментарий</button>
                                </div>
                                @if (!string.IsNullOrEmpty(solution.CommentStatus))
                                {
                                    <span class="text-success ms-2">@solution.CommentStatus</span>
                                }
                            </div>
                            
                            <div class="mt-2">
                                <h6>Комментарии других жюри:</h6>
                                @if (solution.OtherComments?.Any() == true)
                                {
                                    @foreach (var comment in solution.OtherComments)
                                    {
                                        <div class="border-left pl-2 mb-1">
                                            <small><strong>@comment.JuryName:</strong> @comment.Comment (Оценка: @comment.Score)</small>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <small class="text-muted">Нет комментариев от других жюри</small>
                                }
                            </div>
                        </div>
                    }
                }
                else
                {
                    <p class="text-muted">Нет решений для этой задачи.</p>
                }
            </div>
        </div>
    }
}

<button class="btn btn-secondary" @onclick="Back">Назад</button>

@code {
    [Parameter]
    public int HackathonId { get; set; }

    private Hackathon hackathon;
    private List<HTask> tasks;
    private Dictionary<int, List<SolutionWithTeam>> solutionsByTask = new();
    private int currentJuryId => state.Value.User!.Id; // В реальном приложении получать из состояния пользователя
    [Inject] public IState<HackState> state { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        base.OnAfterRenderAsync(firstRender);
        
        if (!firstRender)
        {
            return;
        }
        
        await LoadHackathon();
        await LoadTasksAndSolutions();
    }

    private async Task LoadHackathon()
    {
        try
        {
            hackathon = await Http.GetFromJsonAsync<Hackathon>($"/api/hackathon/{HackathonId}");
        }
        catch { hackathon = null; }
    }

    private async Task LoadTasksAndSolutions()
    {
        try
        {
            tasks = await Http.GetFromJsonAsync<List<HTask>>($"/api/hackathon/{HackathonId}/tasks");
            foreach (var task in tasks)
            {
                var solutions = await Http.GetFromJsonAsync<List<SolutionWithTeam>>($"/api/solution/task?taskId={task.Id}");
                if (solutions != null)
                {
                    foreach (var solution in solutions)
                    {
                        // Загружаем комментарий текущего жюри
                        try
                        {
                            var juryComment = await Http.GetFromJsonAsync<SolutionCommentDTO>($"/api/solution/comment/{solution.Id}/jury/{currentJuryId}");
                            if (juryComment != null)
                            {
                                solution.Comment = juryComment.Comment;
                                solution.Score = juryComment.Score;
                            }
                        }
                        catch { /* Игнорируем ошибки */ }
                        
                        // Загружаем комментарии других жюри
                        try
                        {
                            var allComments = await Http.GetFromJsonAsync<List<SolutionCommentDTO>>($"/api/solution/comment/{solution.Id}");
                            solution.OtherComments = allComments?.Where(c => c.JuryId != currentJuryId).ToList() ?? new List<SolutionCommentDTO>();
                        }
                        catch { solution.OtherComments = new List<SolutionCommentDTO>(); }
                    }
                }
                solutionsByTask[task.Id] = solutions ?? new List<SolutionWithTeam>();
            }
            StateHasChanged();
        }
        catch { tasks = new List<HTask>(); }
    }

    private async Task SaveComment(int solutionId)
    {
        var solution = solutionsByTask.Values.SelectMany(s => s).FirstOrDefault(s => s.Id == solutionId);
        if (solution == null) return;
        
        // Проверка диапазона оценки на фронтенде
        if (solution.Score < 0 || solution.Score > 10)
        {
            solution.CommentStatus = "Ошибка: Оценка должна быть от 0 до 10";
            return;
        }
        
        var comment = new SolutionCommentDTO
        {
            SolutionId = solutionId,
            JuryId = currentJuryId,
            Comment = solution.Comment,
            Score = solution.Score
        };
        
        var response = await Http.PostAsJsonAsync("/api/solution/comment", comment);
        if (response.IsSuccessStatusCode)
        {
            solution.CommentStatus = "Комментарий сохранён!";
        }
        else
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
            solution.CommentStatus = $"Ошибка: {errorMessage}";
        }
    }

    private void Back()
    {
        Nav.NavigateTo("/jury");
    }

    public class HTask
    {
        public int Id { get; set; }
        public string Description { get; set; }
    }

    public class SolutionWithTeam
    {
        public int Id { get; set; }
        public string Text { get; set; }
        public string TeamName { get; set; }
        public string Comment { get; set; }
        public int Score { get; set; }
        public string CommentStatus { get; set; }
        public List<SolutionCommentDTO> OtherComments { get; set; } = new();
    }

    public class SolutionCommentDTO
    {
        public int Id { get; set; }
        public int SolutionId { get; set; }
        public int JuryId { get; set; }
        public string JuryName { get; set; }
        public string Comment { get; set; }
        public int Score { get; set; }
    }
} 