@page "/jury/evaluation/{HackathonId:int}"
@using System.Net.Http.Json
@using HackathonApi.Models
@inject HttpClient Http
@inject NavigationManager Nav

<h2>Оценка хакатона</h2>
@if (hackathon == null)
{
    <p>Загрузка...</p>
}
else
{
    <h4>@hackathon.Name</h4>
    <p>@hackathon.Description</p>
}

<h3>Решения по задачам</h3>
@if (tasks == null)
{
    <p>Загрузка задач...</p>
}
else if (tasks.Count == 0)
{
    <p>Нет задач для оценки.</p>
}
else
{
    @foreach (var task in tasks)
    {
        <div class="card mb-3" style="max-width:800px;">
            <div class="card-header">
                <h5>Задача: @task.Description</h5>
            </div>
            <div class="card-body">
                @if (solutionsByTask.ContainsKey(task.Id) && solutionsByTask[task.Id].Any())
                {
                    @foreach (var solution in solutionsByTask[task.Id])
                    {
                        <div class="border rounded p-3 mb-2">
                            <h6>Команда: @solution.TeamName</h6>
                            <p><strong>Ответ:</strong></p>
                            <div class="bg-light p-2 rounded">@solution.Text</div>
                            <div class="mt-2">
                                <input type="number" class="form-control d-inline-block" style="width:100px;" 
                                       @bind="solution.Score" placeholder="Оценка" min="0" max="10" />
                                <button class="btn btn-success btn-sm ms-2" @onclick="() => SaveScore(solution.Id, solution.Score)">Сохранить оценку</button>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <p class="text-muted">Нет решений для этой задачи.</p>
                }
            </div>
        </div>
    }
}

<button class="btn btn-secondary" @onclick="Back">Назад</button>

@code {
    [Parameter]
    public int HackathonId { get; set; }

    private Hackathon hackathon;
    private List<HTask> tasks;
    private Dictionary<int, List<SolutionWithTeam>> solutionsByTask = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadHackathon();
        await LoadTasksAndSolutions();
    }

    private async Task LoadHackathon()
    {
        try
        {
            hackathon = await Http.GetFromJsonAsync<Hackathon>($"/api/hackathon/{HackathonId}");
        }
        catch { hackathon = null; }
    }

    private async Task LoadTasksAndSolutions()
    {
        try
        {
            tasks = await Http.GetFromJsonAsync<List<HTask>>($"/api/hackathon/{HackathonId}/tasks");
            foreach (var task in tasks)
            {
                var solutions = await Http.GetFromJsonAsync<List<SolutionWithTeam>>($"/api/solution/task?taskId={task.Id}");
                solutionsByTask[task.Id] = solutions ?? new List<SolutionWithTeam>();
            }
        }
        catch { tasks = new List<HTask>(); }
    }

    private async Task SaveScore(int solutionId, int score)
    {
        var response = await Http.PostAsync($"/api/solution/score?solutionId={solutionId}&score={score}", null);
        if (response.IsSuccessStatusCode)
        {
            // Можно добавить уведомление об успешном сохранении
        }
    }

    private void Back()
    {
        Nav.NavigateTo("/jury");
    }

    public class HTask
    {
        public int Id { get; set; }
        public string Description { get; set; }
    }

    public class SolutionWithTeam
    {
        public int Id { get; set; }
        public string Text { get; set; }
        public string TeamName { get; set; }
        public int Score { get; set; }
    }
} 